import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;

public class Server {
	
	
    HashMap<String, DataOutputStream> clients;
    int hp = 1000;

    Server() {
        clients = new HashMap<String, DataOutputStream>();
        Collections.synchronizedMap(clients); 
    }
   
    public void start() {
        ServerSocket serverSocket = null;
        Socket socket = null;
        try {
            serverSocket = new ServerSocket(7777);
            System.out.println("서버가 시작되었습니다.");
            while (true) {
                socket = serverSocket.accept();
                System.out.println("[" + socket.getInetAddress() + ":"
                        + socket.getPort() + "]" + "에서 접속하였습니다.");
                ServerReceiver thread = new ServerReceiver(socket);
                ServerSender sender = new ServerSender(socket);
                thread.start();
                sender.start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    } // start()
    
    
    void sendToAll(String msg) {
        Iterator<String> it = clients.keySet().iterator();
        while (it.hasNext()) {
            try {
                DataOutputStream out = clients.get(it.next());
                out.writeUTF(msg);
            } catch (IOException e) {
            }
        } // while
    } // sendToAll
    
    void sendTo(int index, String msg) {
        Iterator<String> it = clients.keySet().iterator();
        int cnt = 0;
        while (it.hasNext()) {
            try {
                DataOutputStream out = clients.get(it.next());
                if(index == cnt) {
                	out.writeUTF(msg);
                }
                cnt++;
            } catch (IOException e) {
            }
        } // while
    } // sendToAll
    
    
    public static void main(String args[]) {
        new Server().start();
    }
    class ServerReceiver extends Thread {
        Socket socket;
        DataInputStream in;
        DataOutputStream out;
        
        ServerReceiver(Socket socket) {
            this.socket = socket;
            try {
                in = new DataInputStream(socket.getInputStream());
                out = new DataOutputStream(socket.getOutputStream());
            } catch (IOException e) {
            }
        }
        public void run() {
            String[] msg;
            String name = "";
            try {
                msg = in.readUTF().split(",");
                name = msg[0];
                sendToAll("#" + msg[0] + "님이 들어오셨습니다.");
                clients.put(msg[0], out);
                System.out.println("현재 서버접속자 수는 " + clients.size() + "입니다.");

                while (in != null && hp > 0) {
                	msg = in.readUTF().split(",");
                	name = msg[0];
                	synchronized (this) {
                		hp -= Integer.parseInt(msg[1]);
					}
                	System.out.println("남은 HP는 " + hp);
                    //sendToAll(String.valueOf(hp));
                }
            } catch (IOException e) {
                e.printStackTrace();
                System.exit(1);
            } finally {
                /*sendToAll("#" + name + "님이 나가셨습니다.");
                clients.remove(name);
                System.out.println("[" + socket.getInetAddress() + ":"
                        + socket.getPort() + "]" 
                        + "에서 접속을 종료하였습니다.");
                System.out.println("현재 서버접속자 수는 " 
                        + clients.size() + "입니다.");*/
            } // try
        } // run
    } // ReceiverThread
    
    class ServerSender extends Thread {
        Socket socket;
        DataInputStream in;
        DataOutputStream out;
        ServerSender(Socket socket) {
            this.socket = socket;
            try {
                in = new DataInputStream(socket.getInputStream());
                out = new DataOutputStream(socket.getOutputStream());
            } catch (IOException e) {
            }
        }
        public void run() {
            String name = "";
            try {
            	while(hp > 0) {
            		Thread.sleep(5000);
            		sendTo(0, "100");
            	}
            } catch (InterruptedException e) {
				e.printStackTrace();
				System.exit(1);
			} finally {
            } // try
        } // run
    } // ReceiverThread
}
